pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'aminata286'
        
    }

    triggers {
        // D√©clenchement automatique via webhook GitHub
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
                [key: 'pusher_name', value: '$.pusher.name'],
                [key: 'commit_message', value: '$.head_commit.message']
            ],
            causeString: 'Push par $pusher_name sur $ref: "$commit_message"',
            token: 'mysecret',
            printContributedVariables: true,
            printPostContent: true
        )
    }

    stages {

        // üß© √âtape 1 : R√©cup√©ration du code source
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: 'credential-git',
                        url: 'https://github.com/Aminata11/jenkins-test.git'
                    ]]
                )
            }
        }

        // √âtape du pipeline d√©di√©e √† l'analyse SonarQube
        stage('SonarQube Analysis') {
            steps {
                // Active l'environnement SonarQube configur√© dans Jenkins
                // "SonarQubeServer" est le nom que tu as d√©fini dans "Manage Jenkins > Configure System"
                withSonarQubeEnv('SonarQubeServer') { 
                    script {
                        // R√©cup√®re le chemin du SonarQubeScanner install√© via "Global Tool Configuration"
                        def scannerHome = tool 'SonarQubeScanner' 
                        
                        // Ex√©cute la commande sonar-scanner pour analyser le code
                        // Le scanner envoie les r√©sultats au serveur SonarQube
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        // √âtape du pipeline qui v√©rifie le Quality Gate
        stage('Quality Gate') {
            steps {
                // D√©finit un d√©lai maximum de 3 minutes pour attendre la r√©ponse de SonarQube
                timeout(time: 2, unit: 'MINUTES') {
                    // Attend le r√©sultat du Quality Gate (succ√®s ou √©chec)
                    // Si le Quality Gate √©choue, le pipeline est automatiquement interrompu (abortPipeline: true)
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        



        // üîë √âtape 5 : Connexion √† Docker Hub
        stage('Login to DockerHub') {
            steps {
                echo 'Connexion √† Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'credential-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                }
            }
        }

        // üõ†Ô∏è √âtape 6 : Construction de l‚Äôimage backend
        stage('Build Backend Image') {
            steps {
                echo 'Construction de l‚Äôimage backend...'
                sh 'docker build -t $DOCKER_HUB_REPO/backend:latest ./mon-projet-express'
            }
        }

        // üõ†Ô∏è √âtape 7 : Construction de l‚Äôimage frontend
        stage('Build Frontend Image') {
            steps {
                echo 'Construction de l‚Äôimage frontend...'
                sh 'docker build -t $DOCKER_HUB_REPO/frontend:latest ./'
            }
        }

        // üì§ √âtape 8 : Push des images vers Docker Hub
        stage('Push Images') {
            steps {
                echo 'Envoi des images vers Docker Hub...'
                sh '''
                    docker push $DOCKER_HUB_REPO/backend:latest
                    docker push $DOCKER_HUB_REPO/frontend:latest
                '''
            }
        }

        // üöÄ √âtape 9 : D√©ploiement via Docker Compose
        stage('Deploy with Docker Compose') {
            steps {
                echo 'D√©ploiement via Docker Compose...'
                sh 'docker compose up -d'
            }
        }
    }

    // üì¨ √âtapes post-pipeline
    post {
        success {
            emailext(
                subject: "‚úÖ Build SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Pipeline r√©ussi üéâ\nD√©tails : ${env.BUILD_URL}",
                to: "seckaminata87@gmail.com"
            )
        }
        failure {
            emailext(
                subject: "‚ùå Build FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Le pipeline a √©chou√© üòû\nD√©tails : ${env.BUILD_URL}",
                to: "seckaminata87@gmail.com"
            )
        }
        always {
            echo 'Nettoyage des images et conteneurs Docker...'
            sh '''
                docker container prune -f
                docker image prune -f
                docker logout
            '''
        }
    }
}
